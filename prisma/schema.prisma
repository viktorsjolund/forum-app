generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model post {
  id            Int            @id @default(autoincrement())
  title         String         @db.VarChar(255)
  content       String         @db.VarChar(4000)
  topic         String?        @db.VarChar(255)
  views         Int            @default(0)
  created_at    DateTime       @default(now()) @db.DateTime(0)
  updated_at    DateTime?      @updatedAt @db.DateTime(0)
  author        User           @relation(fields: [authorId], references: [id])
  likes         post_like[]
  dislikes      post_dislike[]
  authorId      String
  comments      post_comment[]
  notifications notification[]

  @@index([authorId])
  @@fulltext([title])
  @@fulltext([title, content])
  @@map("forum_post")
}

model post_comment {
  id         Int          @id @default(autoincrement())
  user_id    String
  post_id    Int
  created_at DateTime     @default(now()) @db.DateTime(0)
  updated_at DateTime     @updatedAt @db.DateTime(0)
  content    String       @db.VarChar(500)
  post       post         @relation(fields: [post_id], references: [id])
  author     User         @relation(fields: [user_id], references: [id])
  replies    post_reply[]

  @@index([post_id])
  @@index([user_id])
  @@map("forum_post_comment")
}

model post_reply {
  id         Int          @id @default(autoincrement())
  user_id    String
  comment_id Int
  created_at DateTime     @default(now()) @db.DateTime(0)
  updated_at DateTime     @updatedAt @db.DateTime(0)
  content    String       @db.VarChar(500)
  comment    post_comment @relation(fields: [comment_id], references: [id])
  author     User         @relation(fields: [user_id], references: [id])

  @@index([comment_id])
  @@index([user_id])
  @@map("forum_post_reply")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  username      String?        @unique(map: "username_UNIQUE") @db.VarChar(255)
  password      String?        @db.VarChar(255)
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  role          role?
  posts         post[]
  comments      post_comment[]
  replies       post_reply[]
  notifications notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model post_like {
  id         Int      @id @default(autoincrement())
  user_id    String
  post_id    Int
  created_at DateTime @default(now()) @db.DateTime(0)
  post       post     @relation(fields: [post_id], references: [id])

  @@index([post_id])
  @@map("forum_post_likes")
}

model post_dislike {
  id         Int      @id @default(autoincrement())
  user_id    String
  post_id    Int
  created_at DateTime @default(now()) @db.DateTime(0)
  post       post     @relation(fields: [post_id], references: [id])

  @@index([post_id])
  @@map("forum_post_dislikes")
}

model post_follow {
  id      Int @id @default(autoincrement())
  user_id String
  post_id Int
}

model notification {
  id           Int                  @id @default(autoincrement())
  post_id      Int
  user_id      String
  initiator_id String
  element_id   String?              @db.VarChar(255)
  trigger      notification_trigger
  viewed       Boolean              @default(false)
  created_at   DateTime             @default(now()) @db.DateTime(0)
  post         post                 @relation(fields: [post_id], references: [id])
  user         User                 @relation(fields: [initiator_id], references: [id])
}

enum role {
  ADMIN
  READER
}

enum notification_trigger {
  COMMENT
  EDIT
}
